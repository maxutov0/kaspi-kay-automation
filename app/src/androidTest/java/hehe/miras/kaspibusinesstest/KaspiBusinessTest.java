package hehe.miras.kaspibusinesstest;

import android.util.Log;

import androidx.test.ext.junit.runners.AndroidJUnit4;
import androidx.test.uiautomator.By;
import androidx.test.uiautomator.UiDevice;
import androidx.test.uiautomator.Until;
import androidx.test.platform.app.InstrumentationRegistry;
import androidx.test.uiautomator.UiObject;
import androidx.test.uiautomator.UiSelector;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CountDownLatch;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

import static org.junit.Assert.assertNotNull;

import hehe.miras.kaspibusinesstest.api.AltegioApi;
import hehe.miras.kaspibusinesstest.model.Appointment;
import hehe.miras.kaspibusinesstest.service.AltegioService;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import java.util.TimeZone;
import hehe.miras.kaspibusinesstest.database.AppointmentRepository;

import android.content.Context;

@RunWith(AndroidJUnit4.class)
public class KaspiBusinessTest {

    private UiDevice device;
    private static final String APP_PACKAGE = "hr.asseco.android.kaspibusiness";
    private static final int LAUNCH_TIMEOUT = 30000;

    private List<Appointment> appointments; // –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –∏–∑ Altegio
    private List<String> allowedPhones = new ArrayList<>(); // –ú–∞—Å—Å–∏–≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤

    @Before
    public void setUp() {
        device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
        allowedPhones.add("77753251368");
        allowedPhones.add("77477898496");
        allowedPhones.add("77471022106");
        allowedPhones.add("77058805927");

        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ Altegio –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º UI-—Ç–µ—Å—Ç–æ–≤
        fetchAppointments();

        // –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Kaspi Business
        String command = "am start -n hr.asseco.android.kaspibusiness/kz.kaspibusiness.view.ui.auth.splash.SplashActivity";
        try {
            device.executeShellCommand(command);
        } catch (Exception e) {
            throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: " + command, e);
        }

        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        device.wait(Until.hasObject(By.pkg(APP_PACKAGE).depth(0)), LAUNCH_TIMEOUT);
    }

    @Test
    public void testTransactionFlow() {
        assertNotNull("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å", device.findObject(By.pkg(APP_PACKAGE)));

        if (appointments != null && !appointments.isEmpty()) {
            // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–∞–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
            List<Appointment> filteredAppointments = filterByDate(
                    filterAppointmentsByAllowedPhones(appointments),
                    InstrumentationRegistry.getInstrumentation().getTargetContext());

            if (!filteredAppointments.isEmpty()) {
                Log.d("KaspiBusinessTest", "Filtered appointments count: " + filteredAppointments.size());
                for (Appointment appointment : filteredAppointments) {
                    Log.d("KaspiBusinessTest",
                            "Processing appointment with phone: " + appointment.getClient().getPhone());
                    // wait for the app to load
                    device.wait(Until.hasObject(By.res(APP_PACKAGE, "remotePaymentFragment")), LAUNCH_TIMEOUT);

                    pressTabButton();
                    enterPrice(5000); // –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ü–µ–Ω—É –∏–∑ CRM
                    enterPhoneNumber(appointment.getClient().getPhone()); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ Altegio
                    clickSendButton();
                    clickCloseButton();
                }
            } else {
                Log.e("KaspiBusinessTest", "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤, —Ç–µ—Å—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.");
            }
        } else {
            Log.e("KaspiBusinessTest", "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∏–∑ Altegio, —Ç–µ—Å—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.");
        }
    }

    private List<Appointment> filterByDate(List<Appointment> appointments, Context context) {
        AppointmentRepository repository = new AppointmentRepository(context);
        List<Appointment> filteredAppointments = new ArrayList<>();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault());

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∑–æ–Ω—É UTC+5
        TimeZone timeZone = TimeZone.getTimeZone("Asia/Oral");
        dateFormat.setTimeZone(timeZone);

        long now = System.currentTimeMillis() + timeZone.getRawOffset();
        long twentyFourHoursInMillis = TimeUnit.HOURS.toMillis(24);
        long maxTime = now + twentyFourHoursInMillis;

        for (Appointment appointment : appointments) {
            try {
                if (repository.isAppointmentProcessed(appointment.getId())) {
                    Log.d("KaspiBusinessTest", "‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ): ID=" + appointment.getId());
                    continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                }

                Date appointmentDate = dateFormat.parse(appointment.getDate());
                if (appointmentDate != null) {
                    long appointmentTime = appointmentDate.getTime();

                    if (appointmentTime >= now && appointmentTime <= maxTime) {
                        Log.d("KaspiBusinessTest", "‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: ID=" + appointment.getId());
                        filteredAppointments.add(appointment);
                        repository.addProcessedAppointment(appointment.getId()); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î
                    } else {
                        Log.d("KaspiBusinessTest", "‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 24 —á–∞—Å–æ–≤): ID=" + appointment.getId());
                    }
                } else {
                    Log.d("KaspiBusinessTest", "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã: ID=" + appointment.getId());
                }
            } catch (ParseException e) {
                Log.e("KaspiBusinessTest", "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã: ID=" + appointment.getId(), e);
            }
        }

        Log.d("KaspiBusinessTest",
                "üìä –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: " + filteredAppointments.size() + " –∑–∞–ø–∏—Å–µ–π.");
        return filteredAppointments;
    }

    private List<Appointment> filterAppointmentsByAllowedPhones(List<Appointment> appointments) {
        List<Appointment> filteredAppointments = new ArrayList<>();
        for (Appointment appointment : appointments) {
            String phone = appointment.getClient().getPhone();
            Log.d("KaspiBusinessTest", "Checking phone: " + phone); // Log the phone being checked

            if (allowedPhones.contains(phone)) {
                Log.d("KaspiBusinessTest", "Phone allowed: " + phone); // Log the phone if it's allowed
                filteredAppointments.add(appointment);
            } else {
                Log.d("KaspiBusinessTest", "Phone not allowed: " + phone); // Log the phone if it's not allowed
            }
        }
        return filteredAppointments;
    }

    private void pressTabButton() {
        try {
            // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ resource-id
            UiObject tabButton = device.findObject(
                    new UiSelector().resourceId("hr.asseco.android.kaspibusiness:id/remotePaymentFragment"));

            // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω, –∫–ª–∏–∫–∞–µ–º
            if (tabButton.exists() && tabButton.isEnabled()) {
                tabButton.click();
                sleep(2000);
            } else {
                throw new AssertionError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É '–£–¥–∞–ª—ë–Ω–Ω–æ'");
            }
        } catch (Exception e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–£–¥–∞–ª—ë–Ω–Ω–æ': " + e.getMessage());
        }
    }

    private void enterPrice(int price) {
        device.findObject(By.res(APP_PACKAGE, "amountPhoneEt")).setText(String.valueOf(price));
        sleep(2000);
    }

    private void enterPhoneNumber(String phone) {
        device.findObject(By.res(APP_PACKAGE, "phoneNumberEt")).setText(phone);
        sleep(2000);
    }

    private void clickSendButton() {
        device.findObject(By.res(APP_PACKAGE, "sendTransferBtn")).click();
        sleep(3500);
    }

    private void clickCloseButton() {
        device.findObject(By.res(APP_PACKAGE, "closeBtn")).click();
        sleep(2000);
    }

    private void sleep(int millis) {
        try {
            Thread.sleep(millis);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    private void fetchAppointments() {
        CountDownLatch latch = new CountDownLatch(1);

        AltegioService altegioService = new AltegioService();
        altegioService.authenticateAndFetchAppointments(new Callback<List<Appointment>>() {
            @Override
            public void onResponse(Call<List<Appointment>> call, Response<List<Appointment>> response) {
                if (response.isSuccessful() && response.body() != null) {
                    appointments = response.body();

                    Log.d("KaspiBusinessTest", "Fetched " + appointments.size() + " records from Altegio");

                    // Log details of each fetched record
                    for (Appointment appointment : appointments) {
                        Log.d("KaspiBusinessTest", "Fetched Record - ID: " + appointment.getId() +
                                ", Client Name: " + appointment.getClient().getName() +
                                ", Phone: " + appointment.getClient().getPhone() +
                                ", Datetime: " + appointment.getDate());
                    }
                } else {
                    Log.e("KaspiBusinessTest", "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: " + response.code());
                }
                latch.countDown(); // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Ç–æ–∫ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
            }

            @Override
            public void onFailure(Call<List<Appointment>> call, Throwable t) {
                Log.e("KaspiBusinessTest", "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: " + t.getMessage());
                latch.countDown(); // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Ç–æ–∫ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            }
        });

        try {
            latch.await(); // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Ç–µ—Å—Ç–∞
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
